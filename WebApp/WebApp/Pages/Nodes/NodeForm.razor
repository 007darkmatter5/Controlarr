@page "/node"
@page "/node/{id:int}"
@using Blazorise.Snackbar
@using Shared
@using Shared.Entities.Logs
@using Shared.Entities.Nodes
@using WebApp.Services.LogService
@using WebApp.Services.NodeService
@inject ILogService LogService
@inject INodeService NodeService
@inject NavigationManager NavigationManager
@* @rendermode InteractiveServer *@

<PageTitle>@(Id == null ? "Create a new node" : $"Edit {dbObject.ApplicationAlias}")</PageTitle>

<Form Style="width: 500px;">
    <Validations @ref="validations" Mode="ValidationMode.Auto" Model="@dbObject" ValidateOnLoad="false">
        <Card Class="m-3">
            <CardHeader>
                <CardTitle>@(Id.HasValue ? $"Edit {dbObject.ApplicationAlias}" : "Add New Node")</CardTitle>
            </CardHeader>
            <CardBody>
                <Field>
                    <FieldLabel>Parent Application</FieldLabel>
                    <RadioGroup @bind-CheckedValue="@dbObject.ParentApplication" Name="parentApplication">
                        <Radio Value="@("Radarr")">Radarr</Radio>
                        <Radio Value="@("Sonarr")">Sonarr</Radio>
                        <Radio Value="@("Lidarr")">Lidarr</Radio>
                        <Radio Value="@("Readarr")">Readarr</Radio>
                    </RadioGroup>
                </Field>
                <Validation>
                    <Field>
                        <FieldLabel>Alias</FieldLabel>
                        <TextEdit @bind-Text="@dbObject.ApplicationAlias" />
                        <ValidationMessage For="@(() => dbObject.ApplicationAlias)" />
                    </Field>
                </Validation>
                <Validation>
                    <Field>
                        <FieldLabel>Base URL</FieldLabel>
                        <TextEdit @bind-Text="@dbObject.BaseUrl" />
                        <ValidationMessage For="@(() => dbObject.BaseUrl)" />
                    </Field>
                </Validation>
                <Validation>
                    <Field>
                        <FieldLabel>API Key</FieldLabel>
                        <TextEdit @bind-Text="@dbObject.ApiKey" />
                        <ValidationMessage For="@(() => dbObject.ApiKey)" />
                    </Field>
                </Validation>
                @if (!string.IsNullOrEmpty(version))
                {
                    <Alert Color="Color.Success" Class="mt-2">
                        <Strong>Version:</Strong> @version
                    </Alert>
                }
            </CardBody>
            <CardFooter>
                <Buttons>
                    <Button Color="Color.Primary" Type="ButtonType.Submit" Clicked="@HandleSubmit">Save</Button>
                    <Button Color="Color.Secondary" Clicked="@Cancel">Cancel</Button>
                    @if (Id.HasValue)
                    {
                        <Button Color="Color.Info" Clicked="@GetVersion">Get Version</Button>
                    }
                </Buttons>
            </CardFooter>
        </Card>
    </Validations>
</Form>

<div class="toast-container position-fixed bottom-0 end-0 p-3" style="z-index: 1055">
    @if (showToast)
    {
        <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header">
                <strong class="me-auto">@toastHeader</strong>
                <button type="button" class="btn-close" aria-label="Close" @onclick="() => showToast = false"></button>
            </div>
            <div class="toast-body">
                @toastMessage
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public int? Id { get; set; }

    private Node dbObject { get; set; } = new Node();
    private Validations validations;
    private string version = string.Empty;
    private string message = string.Empty;
    private string btnText = "Create node";

    private bool showToast = false;
    private string toastMessage = string.Empty;
    private string toastHeader = "Notificatiopn";
    Snackbar snackbar;

    protected override async Task OnParametersSetAsync()
    {
        if (Id == null)
        {
            btnText = "Create node";
        }
        else
        {
            btnText = "Edit node";
            var result = await NodeService.GetById((int)Id);
            if (result is null)
            {
                message = "Nothing found.";
            }
            else
            {
                dbObject = result.Data;
            }
        }
    }

    async Task HandleSubmit()
    {
        ServiceResponse<Node> response;

        if (Id == null)
        {
            response = await NodeService.Create(dbObject);
        }
        else
        {
            response = await NodeService.Update(dbObject);
        }

        if (response.Success)
        {
            var log = new LogEntry
            {
                Level = LogLevel.Information,
                Source = "NodeForm",
                Message = Id == null
                    ? $"Created new node: {dbObject.ApplicationAlias}"
                    : $"Updated node: {dbObject.ApplicationAlias}"
            };

            await LogService.Create(log);

            ShowToast("Success", "Node saved successfully!");
            NavigationManager.NavigateTo("/nodes");
        }
        else
        {
            ShowToast("Error", response.Message ?? "An erroc occurred.");
        }
    }

    void Cancel()
    {
        NavigationManager.NavigateTo("/nodes");
    }

    async Task GetVersion()
    {
        if (!Id.HasValue)
            return;

        var result = await NodeService.GetNodeVersion(Id.Value);

        Console.WriteLine($"GetNodeVersion result: Success = {result.Success}, Version = {result.Data?.Version}");

        if (result.Success && result.Data != null)
        {
            version = result.Data.Version;
        }
        else
        {
            version = "Not connected";
            ShowToast("Error", result.Message ?? "Could not retrieve version.");
        }

        StateHasChanged();
    }

    void ShowToast(string header, string message)
    {
        toastHeader = header;
        toastMessage = message;
        showToast = true;
        StateHasChanged();
    }
}
